//
//  XRayWrapperTests.swift
//  VPN ShivayaTests
//
//  Created by Anton Rasen on 12.02.2025.
//

import Foundation
import XCTest
@testable import VPN_Shivaya
import XRayCoreIOSWrapper

final class XRayWrapperTests: XCTestCase {
    func testXRayBasicFunctionality() async throws {
        // 1. –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º —Ç–µ—Å—Ç–∞
        let testBundle = Bundle(for: type(of: self))
        let assetsPath = testBundle.resourcePath ?? testBundle.bundlePath
        print("üìÇ Assets path: \(assetsPath)")
        
        // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        XRaySetAssetsDirectory(assetsPath)
        XRaySetXrayEnv("xray.location.asset", assetsPath)
        XRaySetMemoryLimit()
        print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        // 3. –°–æ–∑–¥–∞–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        let vlessConfig = """
        {
            "log": {
                "loglevel": "debug"
            },
            "inbounds": [{
                "port": 10808,
                "protocol": "socks",
                "settings": {
                    "auth": "noauth",
                    "udp": true
                }
            }],
            "outbounds": [{
                "protocol": "vless",
                "settings": {
                    "vnext": [{
                        "address": "15.188.100.215",
                        "port": 22222,
                        "users": [{
                            "id": "05519058-d2ac-4f28-9e4a-2b2a1386749e",
                            "encryption": "none"
                        }]
                    }]
                },
                "streamSettings": {
                    "network": "ws",
                    "security": "tls",
                    "tlsSettings": {
                        "serverName": "telegram-channel-vlessconfig.sohala.uk",
                        "allowInsecure": false
                    },
                    "wsSettings": {
                        "path": "/telegram-channel-vlessconfig-ws",
                        "headers": {
                            "Host": "telegram-channel-vlessconfig.sohala.uk"
                        }
                    }
                },
                "tag": "proxy"
            }]
        }
        """
        
        // 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        class TestLogger: NSObject, XRayLoggerProtocol {
            func logInput(_ s: String?) {
                if let log = s {
                    print("üîµ XRay Log: \(log)")
                }
            }
        }
        
        let logger = TestLogger()
        var error: NSError?
        
        // 5. –ó–∞–ø—É—Å–∫–∞–µ–º XRay
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º XRay...")
        guard let configData = vlessConfig.data(using: .utf8) else {
            throw NSError(domain: "XRayTest", code: -1, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"])
        }
        
        let success = XRayStartXray(configData, logger, &error)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
        XCTAssertTrue(success, "XRay –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è")
        if let error = error {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ XRay: \(error)")
            throw error
        }
        
        print("‚úÖ XRay –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        // 6. –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        try await Task.sleep(nanoseconds: 3_000_000_000) // 3 —Å–µ–∫—É–Ω–¥—ã
        
        // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        print("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        let isConnected = await testConnection()
        XCTAssertTrue(isConnected, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏")
        
        // 8. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º XRay
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º XRay")
        XRayStopXray()
    }
    
    private func testConnection() async -> Bool {
        print("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏...")
        let configuration = URLSessionConfiguration.default
        configuration.connectionProxyDictionary = [
            kCFProxyHostNameKey: "127.0.0.1",
            kCFProxyPortNumberKey: 10808,
            kCFProxyTypeKey: kCFProxyTypeSOCKS
        ]
        
        print("üì° –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...")
        let session = URLSession(configuration: configuration)
        guard let url = URL(string: "https://www.google.com") else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL")
            return false
        }
        
        do {
            print("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
            let (_, response) = try await session.data(from: url)
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞")
                return false
            }
            
            let isSuccess = (200...299).contains(httpResponse.statusCode)
            print(isSuccess ? "‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (–∫–æ–¥ \(httpResponse.statusCode))" : "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–∫–æ–¥ \(httpResponse.statusCode))")
            return isSuccess
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: \(error)")
            return false
        }
    }
    
    override func tearDown() {
        super.tearDown()
        XRayStopXray()
        print("üßπ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, XRay –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
}
